{"version":3,"sources":["components/Main/index.module.scss","components/FirstPlayer/index.module.scss","utility/pcm-player/pcm-player.js","components/FirstPlayer/index.js","components/Main/index.js","App.js","index.js"],"names":["module","exports","PCMPlayer","option","this","init","prototype","Object","assign","encoding","channels","sampleRate","flushingTime","samples","Float32Array","flush","bind","interval","setInterval","maxValue","getMaxValue","typedArray","getTypedArray","createContext","encodings","typedArrays","Int8Array","Int16Array","Int32Array","audioCtx","window","AudioContext","webkitAudioContext","resume","onstatechange","console","log","state","gainNode","createGain","gain","value","connect","destination","startTime","currentTime","isTypedArray","data","byteLength","buffer","constructor","ArrayBuffer","feed","getFormatedValue","tmp","length","set","i","float32","volume","destroy","clearInterval","close","audioData","channel","offset","decrement","bufferSource","createBufferSource","audioBuffer","createBuffer","getChannelData","duration","start","AudioPlayer","url","useEffect","socketURL","player","ws","WebSocket","binaryType","addEventListener","event","Uint8Array","className","styles","container","Main","useState","localUrl","setLocalUrl","setUrl","top","onChange","target","onBlur","bottom","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ae9e39b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Main_container__1ZgYJ\",\"top\":\"Main_top__39ZCP\",\"bottom\":\"Main_bottom__7DZSF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FirstPlayer_container__1EsvK\"};"," export function PCMPlayer(option) {\n  this.init(option);\n}\n\nPCMPlayer.prototype.init = function (option) {\n  var defaults = {\n    encoding: \"16bitInt\",\n    channels: 1,\n    sampleRate: 8000,\n    flushingTime: 1000,\n  };\n  this.option = Object.assign({}, defaults, option);\n  this.samples = new Float32Array();\n  this.flush = this.flush.bind(this);\n  this.interval = setInterval(this.flush, this.option.flushingTime);\n  this.maxValue = this.getMaxValue();\n  this.typedArray = this.getTypedArray();\n  this.createContext();\n};\n\nPCMPlayer.prototype.getMaxValue = function () {\n  var encodings = {\n    \"8bitInt\": 128,\n    \"16bitInt\": 32768,\n    \"32bitInt\": 2147483648,\n    \"32bitFloat\": 1,\n  };\n\n  return encodings[this.option.encoding]\n    ? encodings[this.option.encoding]\n    : encodings[\"16bitInt\"];\n};\n\nPCMPlayer.prototype.getTypedArray = function () {\n  var typedArrays = {\n    \"8bitInt\": Int8Array,\n    \"16bitInt\": Int16Array,\n    \"32bitInt\": Int32Array,\n    \"32bitFloat\": Float32Array,\n  };\n\n  return typedArrays[this.option.encoding]\n    ? typedArrays[this.option.encoding]\n    : typedArrays[\"16bitInt\"];\n};\n\nPCMPlayer.prototype.createContext = function () {\n  this.audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n\n  // context needs to be resumed on iOS and Safari (or it will stay in \"suspended\" state)\n  this.audioCtx.resume();\n  this.audioCtx.onstatechange = () => console.log(this.audioCtx.state); // if you want to see \"Running\" state in console and be happy about it\n\n  this.gainNode = this.audioCtx.createGain();\n  this.gainNode.gain.value = 1;\n  this.gainNode.connect(this.audioCtx.destination);\n  this.startTime = this.audioCtx.currentTime;\n};\n\nPCMPlayer.prototype.isTypedArray = function (data) {\n  return (\n    data.byteLength && data.buffer && data.buffer.constructor == ArrayBuffer\n  );\n};\n\nPCMPlayer.prototype.feed = function (data) {\n  if (!this.isTypedArray(data)) return;\n  data = this.getFormatedValue(data);\n  var tmp = new Float32Array(this.samples.length + data.length);\n  tmp.set(this.samples, 0);\n  tmp.set(data, this.samples.length);\n  this.samples = tmp;\n};\n\nPCMPlayer.prototype.getFormatedValue = function (data) {\n  var data = new this.typedArray(data.buffer),\n    float32 = new Float32Array(data.length),\n    i;\n\n  for (i = 0; i < data.length; i++) {\n    float32[i] = data[i] / this.maxValue;\n  }\n  return float32;\n};\n\nPCMPlayer.prototype.volume = function (volume) {\n  this.gainNode.gain.value = volume;\n};\n\nPCMPlayer.prototype.destroy = function () {\n  if (this.interval) {\n    clearInterval(this.interval);\n  }\n  this.samples = null;\n  this.audioCtx.close();\n  this.audioCtx = null;\n};\n\nPCMPlayer.prototype.flush = function () {\n  if (!this.samples.length) return;\n  var bufferSource = this.audioCtx.createBufferSource(),\n    length = this.samples.length / this.option.channels,\n    audioBuffer = this.audioCtx.createBuffer(\n      this.option.channels,\n      length,\n      this.option.sampleRate\n    ),\n    audioData,\n    channel,\n    offset,\n    i,\n    decrement;\n\n  for (channel = 0; channel < this.option.channels; channel++) {\n    audioData = audioBuffer.getChannelData(channel);\n    offset = channel;\n    decrement = 50;\n    for (i = 0; i < length; i++) {\n      audioData[i] = this.samples[offset];\n      /* fadein */\n      if (i < 50) {\n        audioData[i] = (audioData[i] * i) / 50;\n      }\n      /* fadeout*/\n      if (i >= length - 51) {\n        audioData[i] = (audioData[i] * decrement--) / 50;\n      }\n      offset += this.option.channels;\n    }\n  }\n\n  if (this.startTime < this.audioCtx.currentTime) {\n    this.startTime = this.audioCtx.currentTime;\n  }\n  console.log(\n    \"start vs current \" +\n      this.startTime +\n      \" vs \" +\n      this.audioCtx.currentTime +\n      \" duration: \" +\n      audioBuffer.duration\n  );\n  bufferSource.buffer = audioBuffer;\n  bufferSource.connect(this.gainNode);\n  bufferSource.start(this.startTime);\n  this.startTime += audioBuffer.duration;\n  this.samples = new Float32Array();\n};\n","import styles from \"./index.module.scss\";\nimport { useEffect } from \"react\";\n\nimport { PCMPlayer } from \"../../utility/pcm-player/pcm-player\";\n\nfunction AudioPlayer({ url }) {\n  useEffect(() => {\n    const socketURL = `ws://${url}`;\n    const player = new PCMPlayer({\n      encoding: \"16bitInt\",\n      channels: 2,\n      sampleRate: 8000,\n      flushingTime: 2000,\n    });\n\n    const ws = new WebSocket(socketURL);\n\n    ws.binaryType = \"arraybuffer\";\n    ws.addEventListener(\"message\", function (event) {\n      const data = new Uint8Array(event.data);\n      player.feed(data);\n    });\n  }, [url]);\n\n  return <div className={styles.container}></div>;\n}\n\nexport default AudioPlayer;\n","import styles from \"./index.module.scss\";\n\nimport AudioPlayer from \"../FirstPlayer\";\nimport { useEffect, useState } from \"react\";\n\nfunction Main() {\n  const [localUrl, setLocalUrl] = useState(\"\");\n  const [url, setUrl] = useState(\"localhost:8080\");\n\n  useEffect(() => {}, [localUrl]);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.top}>\n        <input\n          value={localUrl}\n          onChange={(event) => setLocalUrl(event.target.value)}\n          onBlur={() => setUrl(localUrl)}\n        />\n      </div>\n      <div className={styles.bottom}>\n        <AudioPlayer url={url} />\n      </div>\n    </div>\n  );\n}\n\nexport default Main;\n","import \"./App.css\";\n\nimport Main from \"./components/Main\";\n\nfunction App() {\n  return <Main />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}